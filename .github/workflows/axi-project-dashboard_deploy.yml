name: Build & Deploy AXI Project Dashboard

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  # ────────────────────── 构建应用 ──────────────────────
  build:
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ github.run_id }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false      # 让下面一步显式安装，日志更清晰

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 检查项目结构
        run: |
          echo "🔍 检查项目结构..."
          echo "当前目录: $(pwd)"
          echo "项目根目录内容:"
          ls -la
          echo "后端目录内容:"
          ls -la backend/ || echo "backend 目录不存在"
          echo "前端目录内容:"
          ls -la frontend/ || echo "frontend 目录不存在"

      - name: 构建后端
        working-directory: backend
        run: |
          echo "🔧 开始构建后端..."
          # 清理可能存在的 node_modules 冲突
          rm -rf node_modules
          # 安装所有依赖（包括 devDependencies 用于构建）
          pnpm install --frozen-lockfile
          # 构建项目
          pnpm run build
          echo "✅ 后端构建完成"
          echo "构建产物:"
          ls -la *.js *.d.ts || echo "编译文件不存在"

      - name: 构建前端
        working-directory: frontend
        env:
          REACT_APP_API_URL: https://redamancy.com.cn/project-dashboard/api
          REACT_APP_WS_URL: wss://redamancy.com.cn/project-dashboard/ws
          REACT_APP_ENV: production
        run: |
          echo "🔧 开始构建前端..."
          pnpm run build
          echo "✅ 前端构建完成"
          echo "构建产物:"
          ls -la build/ || echo "build 目录不存在"

      - name: 准备后端生产依赖
        working-directory: backend
        run: |
          echo "🔧 准备后端生产依赖..."
          # 清理构建时的 node_modules，重新安装生产依赖
          rm -rf node_modules
          # 安装生产依赖（现在module-alias已在package.json中）
          pnpm install --prod
          # 检查关键依赖是否存在
          echo "检查关键依赖..."
          ls node_modules/express || echo "❌ express 缺失"
          ls node_modules/mysql2 || echo "❌ mysql2 缺失"
          ls node_modules/module-alias || echo "❌ module-alias 缺失"
          # body-parser 是 express 内置的，无需单独检查
          echo "✅ body-parser 由 express 内置提供"
          # 将 node_modules 复制到临时目录
          mkdir -p ../temp_backend_deps
          cp -r node_modules ../temp_backend_deps/
          echo "✅ 后端依赖准备完成"

      - name: 准备部署文件
        run: |
          echo "🔧 准备部署文件..."
          mkdir -p dist
          
          # 复制后端构建产物
          cp -r backend/dist dist/backend
          cp -r temp_backend_deps/node_modules dist/
          cp backend/package.json dist/
          
          # 复制前端构建产物
          cp -r frontend/build dist/frontend
          
          # 复制配置文件
          cp ecosystem.config.js dist/
          
          # 创建部署脚本
          cat > dist/deploy.sh << 'EOF'
          #!/bin/bash
          echo "🚀 开始部署 axi-project-dashboard..."
          
          # 设置目标目录
          TARGET_DIR="/srv/apps/axi-project-dashboard"
          
          # 检查当前用户
          echo "当前用户: $(whoami)"
          echo "用户ID: $(id)"
          
          # 根据用户类型决定操作方式
          if [ "$(whoami)" = "root" ]; then
            echo "以root用户身份部署..."
            # 确保目录存在 (root用户直接创建，无需sudo)
            mkdir -p $TARGET_DIR
            
            # 停止现有服务
            pm2 stop dashboard-backend || true
            
            # 备份现有部署（如果存在）
            if [ -d "$TARGET_DIR/backend" ]; then
              echo "📦 备份现有部署..."
              cp -r $TARGET_DIR /srv/backups/axi-project-dashboard-$(date +%Y%m%d_%H%M%S) || true
            fi
            
            # 部署新版本
            echo "📂 部署文件到服务器..."
            cp -r backend $TARGET_DIR/
            cp -r node_modules $TARGET_DIR/
            cp -r frontend $TARGET_DIR/
            cp package.json $TARGET_DIR/
            cp ecosystem.config.js $TARGET_DIR/
            
            # root用户无需更改权限，但确保PM2可以访问
            chmod -R 755 $TARGET_DIR
          else
            echo "以非root用户身份部署..."
            # 确保目录存在 (非root用户使用sudo)
            sudo mkdir -p $TARGET_DIR
            sudo chown $(whoami):$(whoami) $TARGET_DIR
            
            # 停止现有服务
            pm2 stop dashboard-backend || true
            
            # 备份现有部署（如果存在）
            if [ -d "$TARGET_DIR/backend" ]; then
              echo "📦 备份现有部署..."
              sudo cp -r $TARGET_DIR /srv/backups/axi-project-dashboard-$(date +%Y%m%d_%H%M%S) || true
            fi
            
            # 部署新版本
            echo "📂 部署文件到服务器..."
            cp -r backend $TARGET_DIR/
            cp -r node_modules $TARGET_DIR/
            cp -r frontend $TARGET_DIR/
            cp package.json $TARGET_DIR/
            cp ecosystem.config.js $TARGET_DIR/
            
            # 设置适当的权限
            sudo chown -R $(whoami):$(whoami) $TARGET_DIR
          fi
          
          # 创建路径别名包装器
          cd $TARGET_DIR
          echo "// 设置模块路径别名" > backend/start-server.js
          echo "const moduleAlias = require('module-alias');" >> backend/start-server.js
          echo "" >> backend/start-server.js
          echo "// 添加路径别名" >> backend/start-server.js
          echo "moduleAlias.addAliases({" >> backend/start-server.js
          echo "  '@': __dirname," >> backend/start-server.js
          echo "  '@config': __dirname + '/config'," >> backend/start-server.js
          echo "  '@database': __dirname + '/database'," >> backend/start-server.js
          echo "  '@services': __dirname + '/services'," >> backend/start-server.js
          echo "  '@utils': __dirname + '/utils'," >> backend/start-server.js
          echo "  '@middleware': __dirname + '/middleware'," >> backend/start-server.js
          echo "  '@routes': __dirname + '/routes'," >> backend/start-server.js
          echo "  '@types': __dirname + '/types'" >> backend/start-server.js
          echo "});" >> backend/start-server.js
          echo "" >> backend/start-server.js
          echo "// 启动主应用" >> backend/start-server.js
          echo "require('./index.js');" >> backend/start-server.js
          
          # 创建或更新日志目录（在启动服务之前）
          if [ "$(whoami)" = "root" ]; then
            mkdir -p /var/log/axi-deploy-dashboard
            chmod 755 /var/log/axi-deploy-dashboard
          else
            sudo mkdir -p /var/log/axi-deploy-dashboard
            sudo chown $(whoami):$(whoami) /var/log/axi-deploy-dashboard
          fi
          
          # 验证关键文件存在
          echo "📋 验证部署文件..."
          ls -la backend/start-server.js || echo "❌ start-server.js 不存在"
          ls -la backend/index.js || echo "❌ backend/index.js 不存在"
          ls -la ecosystem.config.js || echo "❌ ecosystem.config.js 不存在"
          
          # 启动服务
          echo "🚀 启动后端服务..."
          pm2 start ecosystem.config.js --update-env
          
          # 等待服务启动
          echo "⏳ 等待服务启动..."
          sleep 5
          
          # 检查服务状态
          echo "📋 检查服务状态..."
          pm2 status
          pm2 logs dashboard-backend --lines 10 || echo "无法获取日志"
          
          # 测试本地端口
          echo "🔍 测试本地端口8090..."
          curl -f http://localhost:8090/health || echo "❌ 本地健康检查失败"
          
          echo "✅ axi-project-dashboard 部署完成！"
          EOF
          
          chmod +x dist/deploy.sh
          
          echo "✅ 部署文件准备完成"
          echo "部署包内容:"
          ls -la dist/

      - name: 验证构建产物
        run: |
          echo "🔍 验证构建产物..."
          if [ ! -d "dist" ]; then
            echo "❌ dist 目录不存在"
            exit 1
          fi
          
          if [ -z "$(ls -A dist)" ]; then
            echo "❌ dist 目录为空"
            exit 1
          fi
          
          echo "✅ 构建产物验证通过"
          echo "构建包大小:"
          du -sh dist/

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: dist-axi-project-dashboard
          path: dist/
          retention-days: 1
          if-no-files-found: error

      - name: 验证上传
        run: |
          echo "🔍 验证上传结果..."
          echo "上传退出码: $?"
          echo "构建包内容:"
          ls -la dist/ || echo "dist 目录不存在"

  # ────────────────────── 部署说明 ──────────────────────
  deployment-info:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 部署信息
        run: |
          echo "🎉 构建完成！"
          echo "=========================================="
          echo "📋 构建信息:"
          echo "- 项目名称: ${{ github.repository }}"
          echo "- 构建ID: ${{ github.run_id }}"
          echo "- 分支: ${{ github.ref_name }}"
          echo "- 提交: ${{ github.sha }}"
          echo ""
          echo "📦 构建产物:"
          echo "- 产物名称: dist-axi-project-dashboard"
          echo "- 产物内容: 前端构建、后端构建、依赖、配置"
          echo "- 保留天数: 1天"
          echo ""
          echo "🚀 部署流程:"
          echo "- axi-deploy 将通过 workflow_run 事件自动触发部署"
          echo "- 部署将在构建完成后自动开始"
          echo "- 无需手动操作"
          echo ""
          echo "🌐 访问地址:"
          echo "- Web界面: https://redamancy.com.cn/project-dashboard/"
          echo "- API: https://redamancy.com.cn/project-dashboard/api/"
          echo "- 健康检查: https://redamancy.com.cn/project-dashboard/api/health"
          echo "=========================================="

  # ────────────────────── 触发远程部署 ──────────────────────
  trigger-deploy:
    needs: build
    runs-on: ubuntu-latest

    env:                      # 把需要的值全部注入环境变量
      RUN_ID: ${{ needs.build.outputs.run_id }}
      SERVER_HOST: ${{ secrets.SERVER_HOST }}
      SERVER_PORT: ${{ secrets.SERVER_PORT }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      SERVER_KEY: ${{ secrets.SERVER_KEY }}
      DEPLOY_CENTER_PAT: ${{ secrets.DEPLOY_CENTER_PAT }}

    steps:
      - name: 调试SSH配置
        run: |
          echo "🔍 调试SSH连接配置..."
          echo "服务器地址: ${{ secrets.SERVER_HOST }}"
          echo "服务器用户: ${{ secrets.SERVER_USER }}" 
          echo "服务器端口: ${{ secrets.SERVER_PORT }}"
          echo "SSH密钥长度: $(echo '${{ secrets.SERVER_KEY }}' | wc -c)"
          echo "Deploy Center PAT 是否存在: $([ -n '${{ secrets.DEPLOY_CENTER_PAT }}' ] && echo '是' || echo '否')"
          
          # 详细的SSH密钥格式检查
          echo "🔑 SSH密钥格式分析:"
          SSH_KEY='${{ secrets.SERVER_KEY }}'
          echo "第一行: $(echo "$SSH_KEY" | head -1)"
          echo "最后一行: $(echo "$SSH_KEY" | tail -1)"
          
          if echo "$SSH_KEY" | grep -q "BEGIN OPENSSH PRIVATE KEY"; then
            echo "✅ 检测到 OpenSSH 格式私钥"
          elif echo "$SSH_KEY" | grep -q "BEGIN RSA PRIVATE KEY"; then
            echo "⚠️  检测到传统 RSA 格式私钥 - 可能需要转换为 OpenSSH 格式"
          elif echo "$SSH_KEY" | grep -q "BEGIN EC PRIVATE KEY"; then
            echo "✅ 检测到 EC 格式私钥"
          elif echo "$SSH_KEY" | grep -q "BEGIN PRIVATE KEY"; then
            echo "✅ 检测到 PKCS#8 格式私钥"
          else
            echo "❌ 无法识别的密钥格式"
          fi
          
          # 密钥行数检查
          KEY_LINES=$(echo "$SSH_KEY" | wc -l)
          echo "密钥行数: $KEY_LINES"
          
          if [ "$KEY_LINES" -lt 5 ]; then
            echo "⚠️  密钥行数过少，可能不完整"
          fi
          
          # 验证关键参数
          echo "📋 参数验证:"
          echo "- SERVER_HOST: $([ -n '${{ secrets.SERVER_HOST }}' ] && echo '✅' || echo '❌')"
          echo "- SERVER_USER: $([ -n '${{ secrets.SERVER_USER }}' ] && echo '✅' || echo '❌')"
          echo "- SERVER_PORT: $([ -n '${{ secrets.SERVER_PORT }}' ] && echo '✅' || echo '❌')"
          echo "- SERVER_KEY: $([ -n '${{ secrets.SERVER_KEY }}' ] && echo '✅' || echo '❌')"
          echo "- DEPLOY_CENTER_PAT: $([ -n '${{ secrets.DEPLOY_CENTER_PAT }}' ] && echo '✅' || echo '❌')"

      - name: 触发部署
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DEPLOY_CENTER_PAT }}
          script: |
            // 1. 打包机密（为了避开 workflow_call 10 条 secret 限制）
            const deploySecrets = Buffer.from(JSON.stringify({
              SERVER_HOST: process.env.SERVER_HOST,
              SERVER_PORT: process.env.SERVER_PORT,
              SERVER_USER: process.env.SERVER_USER,
              SERVER_KEY : process.env.SERVER_KEY,
              DEPLOY_CENTER_PAT: process.env.DEPLOY_CENTER_PAT
            })).toString('base64');

            // 2. Nginx 配置用模板字符串写更易读
            const nginxConfig = `
              # axi-project-dashboard 配置
              location /project-dashboard {
                  alias /srv/apps/axi-project-dashboard/frontend;
                  try_files $uri $uri/ /project-dashboard/index.html;
                  
                  location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2)$ {
                      expires 1y;
                      add_header Cache-Control "public, immutable";
                  }
              }
              
              location /project-dashboard/api/ {
                  rewrite ^/project-dashboard/api/(.*) /api/$1 break;
                  proxy_pass http://127.0.0.1:8090;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_set_header X-Forwarded-Prefix /project-dashboard;
              }
              
              location /project-dashboard/ws/ {
                  rewrite ^/project-dashboard/ws/(.*) /socket.io/$1 break;
                  proxy_pass http://127.0.0.1:8091;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection "upgrade";
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
              
              location /project-dashboard/webhook/github {
                  rewrite ^/project-dashboard/webhook/github(.*) /api/webhooks/github$1 break;
                  proxy_pass http://127.0.0.1:8090;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }

              location = /project-dashboard { return 301 /project-dashboard/; }
            `.trim();

            console.log('🚀  触发 axi-deploy/main-deployment.yml …');
            console.log('项目名称:', context.repo.repo);
            console.log('源仓库:', `${context.repo.owner}/${context.repo.repo}`);
            console.log('运行ID:', process.env.RUN_ID);

            // 等待一段时间确保artifact完全可用
            console.log('⏳ 等待artifact完全可用...');
            await new Promise(resolve => setTimeout(resolve, 5000)); // 等待5秒
            
            // 再次检查 workflow run 状态
            console.log('🔍 检查 workflow run 状态...');
            const run = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: process.env.RUN_ID
            });
            
            console.log('📊 Workflow run 状态:', run.data.status);
            console.log('📊 Workflow run 结论:', run.data.conclusion);
            
            if (run.data.status !== 'completed') {
              console.log('⏳ Workflow run 尚未完成，继续等待...');
              await new Promise(resolve => setTimeout(resolve, 5000)); // 再等待5秒
            }

            await github.rest.actions.createWorkflowDispatch({
              owner: 'MoseLu',
              repo:  'axi-deploy',
              workflow_id: 'main-deployment.yml',
              ref: 'master',
              inputs: {
                project      : context.repo.repo,
                source_repo  : `${context.repo.owner}/${context.repo.repo}`,
                run_id       : process.env.RUN_ID,
                deploy_type  : 'backend',
                start_cmd    : './deploy.sh',
                nginx_config : nginxConfig,
                test_url     : 'https://redamancy.com.cn/project-dashboard/api/health',
                deploy_secrets: deploySecrets
              }
            });

            console.log('✅  部署工作流已成功触发！');