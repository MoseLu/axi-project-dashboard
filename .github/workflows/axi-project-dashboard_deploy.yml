name: Build & Trigger Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  # ────────────────────── 构建应用 ──────────────────────
  build:
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ github.run_id }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 安装依赖
        run: |
          echo "🔧 安装项目依赖..."
          rm -rf node_modules pnpm-lock.yaml
          pnpm install --no-frozen-lockfile --shamefully-hoist
          echo "✅ 依赖安装完成"

      - name: 检查项目结构
        run: |
          echo "🔍 检查项目结构..."
          echo "当前目录: $(pwd)"
          ls -la
          ls -la backend/ || echo "backend 目录不存在"
          ls -la frontend/ || echo "frontend 目录不存在"

      - name: 构建后端
        working-directory: backend
        run: |
          echo "🔧 开始构建后端..."
          rm -rf node_modules dist pnpm-lock.yaml
          pnpm install --no-frozen-lockfile --shamefully-hoist
          echo "🔍 验证构建依赖..."
          ls node_modules/typescript || echo "❌ TypeScript 缺失"
          ls node_modules/express || echo "❌ express 缺失"
          echo "🔨 开始TypeScript编译..."
          npx tsc
          echo "✅ 后端构建完成"
          ls -la dist/ || echo "dist目录不存在"

      - name: 构建前端
        working-directory: frontend
        env:
          REACT_APP_API_URL: https://redamancy.com.cn/project-dashboard/api
          REACT_APP_WS_URL: wss://redamancy.com.cn/project-dashboard/ws
          REACT_APP_ENV: production
        run: |
          echo "🔧 开始构建前端..."
          pnpm run build
          echo "✅ 前端构建完成"
          ls -la dist/ || echo "dist 目录不存在"

      - name: 准备后端生产依赖
        working-directory: backend
        run: |
          echo "🔧 准备后端生产依赖..."
          rm -rf node_modules pnpm-lock.yaml
          pnpm install --prod --no-frozen-lockfile --shamefully-hoist
          echo "✅ 后端生产依赖准备完成"

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            backend/dist/
            backend/node_modules/
            backend/package.json
            backend/start-simple.sh
            backend/ecosystem.config.js
            frontend/dist/
            config/
            scripts/
          retention-days: 1

      - name: 触发 axi-deploy 部署
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('🚀 触发 axi-deploy 部署工作流...');
            console.log('项目名称:', context.repo.repo);
            console.log('源仓库:', `${context.repo.owner}/${context.repo.repo}`);
            console.log('运行ID:', process.env.RUN_ID);

            // 构建 Nginx 配置
            const nginxConfig = `
              location /project-dashboard {
                alias /srv/apps/axi-project-dashboard/frontend;
                try_files $uri $uri/ /project-dashboard/index.html;
              }
              
              location /project-dashboard/api/ {
                rewrite ^/project-dashboard/api/(.*) /api/$1 break;
                proxy_pass http://127.0.0.1:8090;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-Forwarded-Prefix /project-dashboard;
              }
              
              location /project-dashboard/ws/ {
                proxy_pass http://127.0.0.1:8090;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
              }
              
              location /project-dashboard/webhook/github {
                rewrite ^/project-dashboard/webhook/github(.*) /api/webhooks/github$1 break;
                proxy_pass http://127.0.0.1:8081;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
              }
              
              location = /project-dashboard {
                return 301 /project-dashboard/;
              }
            `;

            // 构建部署配置
            const deployConfig = {
              nginx_config: nginxConfig,
              test_url: 'https://redamancy.com.cn/project-dashboard/health',
              start_cmd: 'bash start-simple.sh --reload',
              service_port: '8090',
              mysql_config: '',
              skip_init: false
            };
            
            // 将部署配置编码为base64
            const deployConfigBase64 = Buffer.from(JSON.stringify(deployConfig)).toString('base64');
            
            // 触发 axi-deploy 的部署工作流
            await github.rest.actions.createWorkflowDispatch({
              owner: 'MoseLu',
              repo: 'axi-deploy',
              workflow_id: 'main-deployment.yml',
              ref: 'master',
              inputs: {
                project: context.repo.repo,
                source_repo: `${context.repo.owner}/${context.repo.repo}`,
                run_id: process.env.RUN_ID,
                deploy_type: 'backend',
                deploy_config: deployConfigBase64
              }
            });

            console.log('✅ axi-deploy 部署工作流已成功触发！');
            
            // 通知部署仪表板
            console.log('📤 通知部署仪表板...');
            try {
              const notificationData = {
                project: context.repo.repo,
                status: 'triggered',
                duration: 0,
                timestamp: new Date().toISOString(),
                sourceRepo: `${context.repo.owner}/${context.repo.repo}`,
                runId: process.env.RUN_ID,
                deployType: 'backend',
                logs: '构建完成，已触发 axi-deploy 部署工作流'
              };
              
              const response = await fetch('https://redamancy.com.cn/project-dashboard/api/webhooks/deployment', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'User-Agent': 'axi-project-dashboard/1.0'
                },
                body: JSON.stringify(notificationData)
              });
              
              if (response.ok) {
                console.log('✅ 部署通知发送成功');
              } else {
                console.log('⚠️ 部署通知发送失败:', response.status);
              }
            } catch (error) {
              console.log('⚠️ 部署通知发送失败:', error.message);
            }